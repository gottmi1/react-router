1. serve 패키지를 이용한 배포
npm i serve -g
전역 설치
serve -s build
어기서 -s는 spa의 약자

2. express로 배포

app.use(express.static(path.join(__dirname, "build")));
현재 이 파일이 존재하는 단에서 두 번째 인자(폴더)를 찾아 들어감

app.get("*", (req, res) => {
  res.sendFile(path.join(__dirname, "build", "index.html"));
});
정해지지 않은 경로를 요청한 경우 index.html을 보여줌

3. SSR이해하기

- ReactDOMServer안의 rednerToString() 메서드를 이용하면 서버측에서 컴포넌트를 렌더하고 그것을 문자열로 바꿔서 내려줌.

- 서버에서 응답을 가져올 때 기존처럼 static파일만 가져오는 게 아니고 서버에서 응답 값을 만들어서 내려준 후 static file을 내려준다. 이 이후론 spa처럼 동작 함.

- 라우팅, 리덕스와 같은 처리를 서버에서 진행하고 내려주게 되면 복잡하고 어려워 진다. jsx가 포함된 리액트 코드를 서버에서 읽을 수 있도록 babel설정을 해주어야 함.

- ReactDOMServer를 콘솔로 찍어보면
{
  version: '18.2.0',
  renderToString: [Function: renderToString],
  renderToStaticMarkup: [Function: renderToStaticMarkup],      
  renderToNodeStream: [Function: renderToNodeStream],
  renderToStaticNodeStream: [Function: renderToStaticNodeStream],
  renderToPipeableStream: [Function: renderToPipeableStream]   
}
이런 객체가 나옴

어렵기 때문에 기본만 알고 만드는 건 next.js를 이용하자
